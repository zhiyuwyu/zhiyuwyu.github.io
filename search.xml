<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一篇搞定 SpringBoot+Mybatis+Shiro 实现多角色权限管理</title>
    <url>/2021/07/14/%E4%B8%80%E7%AF%87%E6%90%9E%E5%AE%9A%20SpringBoot+Mybatis+Shiro%20%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>初衷：我在网上想找整合springboot+mybatis+shiro并且多角色认证的博客，发现找了好久也没有找到想要的，现在自己会了，就打算写个博客分享出去,希望能帮到你。<br>原创不易，请点赞支持！</p>
</blockquote>
<blockquote>
<p>该项目不会将过多基础，直接实战，比较使用于有一点基础的， 并且想整合springboot+mybatis+shiro的朋友们。</p>
</blockquote>
<p>代码和数据库sql都放在github,链接如下：<a href="https://github.com/zhiyuwyu/springboot-mybatis-shiro.git">https://github.com/zhiyuwyu/springboot-mybatis-shiro.git</a></p>
<h2 id="1、了解需求"><a href="#1、了解需求" class="headerlink" title="1、了解需求"></a>1、了解需求</h2><h3 id="1-1、需求"><a href="#1-1、需求" class="headerlink" title="1.1、需求"></a>1.1、需求</h3><ul>
<li>首页页面必须登录成功之后才能访问</li>
<li>所有用户、游客等都可访问登录页面、测试页面，无需登录</li>
<li>拥有 root 角色的用户可以访问所有页面，包括添加页面、删除页面、查询页面、测试页面等</li>
<li>拥有admin 角色的用户可以访问添加页面，查询页面、测试页面，除了删除页面不能访问</li>
<li>拥有 user 角色的用户可以访问 查询页面、测试页面，除了添加页面、删除页面不能访问<span id="more"></span>
<h3 id="1-2、了解页面"><a href="#1-2、了解页面" class="headerlink" title="1.2、了解页面"></a>1.2、了解页面</h3></li>
</ul>
<p>==登录页面如下==</p>
<p><img src="https://img-blog.csdnimg.cn/20210713124216307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>==首页页面如下==</p>
<p><img src="https://img-blog.csdnimg.cn/20210713124255181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>==分别点击添加、删除、查询、测试超链接，展示的内容如下==<br><img src="https://img-blog.csdnimg.cn/20210713124326379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="2、准备数据库环境"><a href="#2、准备数据库环境" class="headerlink" title="2、准备数据库环境"></a>2、准备数据库环境</h2><p>新建一个<code>test</code>数据库,创建两个表（role、user）并插入数据，sql 如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : LocalHost</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 50731</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : test</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 50731</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 12/07/2021 21:08:51</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `remark` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_unicode_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;超级管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;普通用户&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_id` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_unicode_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;rootA&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;adminA&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;userA&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;userB&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>role 表数据如下：<br><img src="https://img-blog.csdnimg.cn/20210713124357352.png#pic_center" alt="在这里插入图片描述"></p>
<p>user 表数据如下：<br><img src="https://img-blog.csdnimg.cn/20210713124426278.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="3、编写代码"><a href="#3、编写代码" class="headerlink" title="3、编写代码"></a>3、编写代码</h2><h3 id="3-1、新建SpringBoot-工程项目"><a href="#3-1、新建SpringBoot-工程项目" class="headerlink" title="3.1、新建SpringBoot 工程项目"></a>3.1、新建SpringBoot 工程项目</h3><p><img src="https://img-blog.csdnimg.cn/2021071312450297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210713124523647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="3-2、添加如下依赖"><a href="#3-2、添加如下依赖" class="headerlink" title="3.2、添加如下依赖"></a>3.2、添加如下依赖</h3><blockquote>
<p>全部依赖如下</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring对Shiro支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--test单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3、编写代码连接数据库并测试"><a href="#3-3、编写代码连接数据库并测试" class="headerlink" title="3.3、编写代码连接数据库并测试"></a>3.3、编写代码连接数据库并测试</h3><h4 id="3-3-1、配置数据库信息"><a href="#3-3-1、配置数据库信息" class="headerlink" title="3.3.1、配置数据库信息"></a>3.3.1、配置数据库信息</h4><blockquote>
<p>把 application.properties 文件修改成 application.yml，并添加如下内容 </p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span> </span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span> </span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="comment"># 打印sql语句</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com:</span></span><br><span class="line">      <span class="attr">huang:</span></span><br><span class="line">        <span class="attr">shiro1:</span></span><br><span class="line">          <span class="attr">mapper:</span> <span class="string">debug</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-3-2、编写实体类-entity"><a href="#3-3-2、编写实体类-entity" class="headerlink" title="3.3.2、编写实体类 entity"></a>3.3.2、编写实体类 entity</h4><blockquote>
<p>新建一个entity 包，分别添加下面两个实体类</p>
</blockquote>
<p>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.springbootmybatisshiro.entity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (User)实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">227751358530931042L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Role.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.springbootmybatisshiro.entity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (Role)实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">76407922564857637L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-3、mapper"><a href="#3-3-3、mapper" class="headerlink" title="3.3.3、mapper"></a>3.3.3、mapper</h4><blockquote>
<p>新建一个 mapper 包，分别创建下面两个文件</p>
</blockquote>
<p>UserMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Username 查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">queryByUsername</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.huang.springbootmybatisshiro.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.huang.springbootmybatisshiro.entity.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMapWithRole&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.huang.springbootmybatisshiro.entity.User&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;role&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.huang.springbootmybatisshiro.entity.Role&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rremark&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryByUsername&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMapWithRole&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        u.*,r.id rid,r.name rname,r.remark rremark</span><br><span class="line">        from test.user u,test.role r</span><br><span class="line">        where u.role_id=r.id</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and username = #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>==注意：==</p>
<blockquote>
<p>UserMapper.xml 和UserMapper.java 文件写在同一目录下，需在pom.xml文件添加如下内容</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>并且在启动类中添加注解@mapperscan 全局扫描 mapper 文件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.huang.springbootmybatisshiro.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootMybatisShiroApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootMybatisShiroApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-4、service"><a href="#3-3-4、service" class="headerlink" title="3.3.4、service"></a>3.3.4、service</h4><blockquote>
<p>新建一个包service，并添加 Userservice.java 文件如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.3.4 测试是否可以正常获取数据库信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootMybatisShiroApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User rootA = userService.queryByUsername(<span class="string">&quot;rootA&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;=====================================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;rootA = &quot;</span> + rootA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果输入如下数据则成功，就可以进行下一步了</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210713124558688.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="3-4、编写页面"><a href="#3-4、编写页面" class="headerlink" title="3.4、编写页面"></a>3.4、编写页面</h3><p>在resources目录下新建文件夹templates（有就不用了），在templates 下添加如下页面</p>
<ul>
<li>add.html 添加页面</li>
<li>delete.html 删除页面</li>
<li>index.html 首页页面</li>
<li>login.html 登录页面</li>
<li>query.html 查询页面</li>
<li>test.html 测试页面</li>
<li>unauthorized.html 未授权页面</li>
</ul>
<blockquote>
<p>add.html</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>add<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>添加页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>delete.html</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>update<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>删除页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>index.html</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">进入用户添加页面： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">进入用户删除页面： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;delete&quot;</span>&gt;</span>删除页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">进入用户查询页面： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;query&quot;</span>&gt;</span>查询页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">进入用户测试页面： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;test&quot;</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>login.html</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>query.html</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>query<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>查询页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>test.html</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>unauthorized.html。当访问不够权限的页面时会跳转到该页面</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>unauthorized<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你未授权，请联系管理员<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5、编写-shiro-的有关配置"><a href="#3-5、编写-shiro-的有关配置" class="headerlink" title="3.5、编写 shiro 的有关配置"></a>3.5、编写 shiro 的有关配置</h3><p>新建一个config 包，添加以下文件</p>
<blockquote>
<p>CustomRealm.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Zhiyu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/7/13 10:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 主要用于用户数据和shiro的交互工作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权：给当前用户授权，以便能访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principals</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// principal 就是下面的方法 doGetAuthenticationInfo 中的return new SimpleAuthenticationInfo(user, user.getPassword(), &quot;&quot;) 中的第一个参数 user 赋值的</span></span><br><span class="line">        User principal = (User) principals.getPrimaryPrincipal();</span><br><span class="line">        System.out.println(<span class="string">&quot;principal = &quot;</span> + principal);</span><br><span class="line">        <span class="comment">// 给资源进行授权</span></span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">// 授权该用户的本身角色的权限</span></span><br><span class="line">        info.addRole(principal.getRole().getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证：能不能登录等认证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------进入了认证逻辑---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// token 中存储着 subject.login(token) 中传过来的数据</span></span><br><span class="line">        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        String username = token.getUsername();</span><br><span class="line">        <span class="comment">// 这里假设，数据库中的 username 字段是唯一字段，可以作为唯一标识，实际开发中可以适当修改，换汤不换药</span></span><br><span class="line">        <span class="comment">// 根据 username 去数据库查询用户信息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据库查询回来的数据</span></span><br><span class="line">        User user = userService.queryByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 用户名不存在</span></span><br><span class="line">            <span class="comment">// return null;  shiro 底层会抛出UnknowAccountException</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个参数 user: 代表传值,及保存用户的信息，后面会用到</span></span><br><span class="line">        <span class="comment">// 第二个参数 填真正的密码，shiro 会帮我们做密码验证，无需我们自己做密码验证逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPassword(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ShiroConfig.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Zhiyu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/7/13 10:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: shiro 的配置</span></span><br><span class="line"><span class="comment"> * 完成下面三件事</span></span><br><span class="line"><span class="comment"> * 1.创建 ShiroFilterFactoryBean</span></span><br><span class="line"><span class="comment"> * 2.DefaultWebSecurityManager</span></span><br><span class="line"><span class="comment"> * 3.创建Realm并关联</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(name = &quot;customRealm&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomRealm <span class="title">customRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">(CustomRealm customRealm)</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(customRealm);</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> securityManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *    Shiro内置过滤器，可以实现权限相关的拦截器</span></span><br><span class="line"><span class="comment">         *    常用的过滤器：</span></span><br><span class="line"><span class="comment">         *       anon: 无需认证（登录）可以访问</span></span><br><span class="line"><span class="comment">         *       authc: 必须认证才可以访问</span></span><br><span class="line"><span class="comment">         *       user: 如果使用rememberMe的功能可以直接访问</span></span><br><span class="line"><span class="comment">         *       perms： 该资源必须得到资源权限才可以访问</span></span><br><span class="line"><span class="comment">         *       roles: 该资源必须得到角色权限才可以访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 1. 权限相关的拦截器（什么路径需要什么权限）</span></span><br><span class="line">        LinkedHashMap&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        filterMap.put(<span class="string">&quot;/delete&quot;</span>, <span class="string">&quot;roles[root]&quot;</span>); <span class="comment">//roles[root] 意思是访问/delete 需要角色 root</span></span><br><span class="line">        <span class="comment">// roles[admin,root]意思是访问/add 需要角色 admin或者root。</span></span><br><span class="line">        <span class="comment">// 如果不配置 RoleFilter，解决多角色and关系，则roles[admin,root]意思就是访问/add 需要 admin和root两个角色同时。</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/add&quot;</span>, <span class="string">&quot;roles[admin,root]&quot;</span>);</span><br><span class="line">        <span class="comment">// anon，意识是/test、/login / 无需认证（登录）可以访问</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/test&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        <span class="comment">// authc 其余的访问都必须认证才可以访问，</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/*&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);<span class="comment">// 添加shiro 权限过滤器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 配置自定义 or 角色 认证，把自定义过滤器配置进去即可</span></span><br><span class="line">        LinkedHashMap&lt;String, Filter&gt; filters = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        filters.put(<span class="string">&quot;roles&quot;</span>, <span class="keyword">new</span> RoleFilter());</span><br><span class="line">        shiroFilterFactoryBean.setFilters(filters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 修改默认的登录页面和未授权页面</span></span><br><span class="line">        <span class="comment">// 即访问需要登录有页面时会跳转到 /toLogin 请求</span></span><br><span class="line">        <span class="comment">// 即访问需要不够权限的时候页面时会跳转到 /toLogin 请求</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/unauthorized&quot;</span>);<span class="comment">// 修改调整的登录页面</span></span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/unauthorized&quot;</span>);<span class="comment">// 设置未授权提示页面</span></span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>RoleFilter.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Zhiyu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/7/13 11:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 重写Shiro自带角色权限过滤器</span></span><br><span class="line"><span class="comment"> * shiro自带的方法同一权限只能分配一个角色，默认所个角色的时候是 and 关系，不是 or 关系</span></span><br><span class="line"><span class="comment"> * 所以重写 重写Shiro自带角色权限过滤器 解决多角色 的时候是 or 关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleFilter</span> <span class="keyword">extends</span> <span class="title">RolesAuthorizationFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Subject subject = getSubject(request, response);</span><br><span class="line">        <span class="keyword">final</span> String[] rolesArray = (String[]) mappedValue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rolesArray == <span class="keyword">null</span> || rolesArray.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 无指定角色时，无需检查，允许访问</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String roleName : rolesArray) &#123;</span><br><span class="line">            <span class="keyword">if</span> (subject.hasRole(roleName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-6、编写Controller层代码"><a href="#3-6、编写Controller层代码" class="headerlink" title="3.6、编写Controller层代码"></a>3.6、编写Controller层代码</h3><blockquote>
<p>新建一个controller包，添加 UserController.java 文件，内容如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 shiro 编写认证(登录)逻辑</span></span><br><span class="line"><span class="comment">     * 1. 获取 Subject</span></span><br><span class="line"><span class="comment">     * 2. 封装用户数据</span></span><br><span class="line"><span class="comment">     * 3. 执行登录方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">        System.out.println(<span class="string">&quot;password = &quot;</span> + password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取 Subject</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">// 2. 封装用户数据</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">        String msg = <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3. 执行登录方法, 到 CustomRealm 类的doGetAuthenticationInfo中去执行认证逻辑</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">            msg = <span class="string">&quot;未知账户&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">            msg = <span class="string">&quot;密码不正确&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">            msg = <span class="string">&quot;账户已锁定&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExcessiveAttemptsException eae) &#123;</span><br><span class="line">            msg = <span class="string">&quot;用户名或密码错误次数过多&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">            msg = <span class="string">&quot;用户名或密码不正确！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line">        <span class="keyword">if</span> (subject.isAuthenticated()) &#123;</span><br><span class="line">            <span class="comment">// 登录成功，跳转到 index.html</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/index&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            token.clear();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7、编写 WebMvcConfig, 配置无逻辑的访问页面跳转</p>
<blockquote>
<p>在config 包下新建 WebMvcConfig.java ，代码如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里配置一些无逻辑处理的页面请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * registry.addViewController(&quot;/add&quot;).setViewName(&quot;add&quot;);</span></span><br><span class="line"><span class="comment">         * 的意识等价于 在controller 层的</span></span><br><span class="line"><span class="comment">         *     <span class="doctag">@RequestMapping</span>(&quot;/add&quot;)</span></span><br><span class="line"><span class="comment">         *     public String add() &#123;</span></span><br><span class="line"><span class="comment">         *         return &quot;add&quot;; // 跳转到 add.html 页面</span></span><br><span class="line"><span class="comment">         *     &#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  所以registry.addViewController(&quot;/add&quot;).setViewName(&quot;add&quot;);</span></span><br><span class="line"><span class="comment">         *  意思是：访问 /add 就会跳转到 add.html 页面</span></span><br><span class="line"><span class="comment">         *  下面的以此类推</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/add&quot;</span>).setViewName(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/delete&quot;</span>).setViewName(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/query&quot;</span>).setViewName(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/toLogin&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/unauthorized&quot;</span>).setViewName(<span class="string">&quot;unauthorized&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/test&quot;</span>).setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动项目进行测试</p>
</blockquote>
<h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><blockquote>
<p>User 表数据如下</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210713124634244.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="4-0、游客访问"><a href="#4-0、游客访问" class="headerlink" title="4.0、游客访问"></a>4.0、游客访问</h4><blockquote>
<p>游客直接在浏览器输入下面的地址</p>
</blockquote>
<ul>
<li><p><code>http://localhost:8080/add</code></p>
</li>
<li><p><code>http://localhost:8080/delete</code> </p>
</li>
<li><p><code>http://localhost:8080/query</code></p>
</li>
</ul>
<p>都是下面会跳转到登录页面</p>
<p>除了访问<code>http://localhost:8080/test</code> 可以正确跳转<br><img src="https://img-blog.csdnimg.cn/2021071312470373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="4-1、测试无用户登录"><a href="#4-1、测试无用户登录" class="headerlink" title="4.1、测试无用户登录"></a>4.1、测试无用户登录</h4><p>访问 <code>http://localhost:8080/</code>, 输入如下信息</p>
<p><img src="https://img-blog.csdnimg.cn/20210713124749163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>点击提交，然后显示的页面如下</p>
<p><img src="https://img-blog.csdnimg.cn/20210713124811429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="4-2、测试密码不正确登录"><a href="#4-2、测试密码不正确登录" class="headerlink" title="4.2、测试密码不正确登录"></a>4.2、测试密码不正确登录</h4><p>访问 <code>http://localhost:8080/</code>, 输入如下信息<br><img src="https://img-blog.csdnimg.cn/20210713124834690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>点击提交，然后显示的页面如下<br><img src="https://img-blog.csdnimg.cn/20210713124902637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="4-3、测试-rootA用户正确登录"><a href="#4-3、测试-rootA用户正确登录" class="headerlink" title="4.3、测试 rootA用户正确登录"></a>4.3、测试 rootA用户正确登录</h4><p>访问 <code>http://localhost:8080/</code>, 输入如下信息<br><img src="https://img-blog.csdnimg.cn/20210713124945325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>点击提交，然后显示的页面如下</p>
<p><img src="https://img-blog.csdnimg.cn/20210713125014703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>分别点击添加、删除、查询、测试页面，分别显示的页面如下</p>
<p><img src="https://img-blog.csdnimg.cn/20210713125112872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>结果：可以看到全部页面都可以正常访问。</p>
</blockquote>
<h4 id="4-4、测试adminA用户正确登录"><a href="#4-4、测试adminA用户正确登录" class="headerlink" title="4.4、测试adminA用户正确登录"></a>4.4、测试adminA用户正确登录</h4><p>访问 <code>http://localhost:8080/</code>, 输入如下信息<br><img src="https://img-blog.csdnimg.cn/20210713125136888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>点击提交，然后显示的页面如下</p>
<p><img src="https://img-blog.csdnimg.cn/20210713125014703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>分别点击添加、删除、查询、测试页面，分别显示的页面如下</p>
<p><img src="https://img-blog.csdnimg.cn/20210713125212564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>结果：拥有admin 角色的用户可以访问添加页面，查询页面、测试页面，除了删除页面不能访问</p>
</blockquote>
<h4 id="4-5、测试userA用户正确登录"><a href="#4-5、测试userA用户正确登录" class="headerlink" title="4.5、测试userA用户正确登录"></a>4.5、测试userA用户正确登录</h4><p>访问 <code>http://localhost:8080/</code>, 输入如下信息</p>
<p><img src="https://img-blog.csdnimg.cn/20210713125241923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>点击提交，然后显示的页面如下</p>
<p><img src="https://img-blog.csdnimg.cn/20210713125014703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>分别点击添加、删除、查询、测试页面，分别显示的页面如下<br><img src="https://img-blog.csdnimg.cn/20210713125302892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjY5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>结果：拥有 user 角色的用户可以访问 查询页面、测试页面，除了添加页面、删除页面不能访问</p>
</blockquote>
<h2 id="5、结语"><a href="#5、结语" class="headerlink" title="5、结语"></a>5、结语</h2><ul>
<li>该项目不会将过多基础，直接实战，比较使用有一点基础的。</li>
<li>该项目中没有使用密码加密，如果多人浏览并反馈需要，我可以再写篇密码加密认证的</li>
<li>都是原创，希望看到这的能够点个赞支持一些。</li>
<li>代码和数据库sql都放在github,链接如下：<a href="https://github.com/JiuRiYunYue/springboot-mybatis-shiro.git">https://github.com/JiuRiYunYue/springboot-mybatis-shiro.git</a></li>
</ul>
]]></content>
      <categories>
        <category>整合</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Mybatis</tag>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Vue部署阿里云liunx服务器</title>
    <url>/2021/07/14/SpringBoot-Vue%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91liunx%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul>
<li>SpringBoot - Vue 前后端分离项目确保能够在本机完成前后端连接，正常访问！</li>
<li>阿里云部署了 java 环境。</li>
<li>配好 mysql 环境。</li>
<li>Tomcat 不用也行，因为SpringBoot 已经内置了Tomcat</li>
</ul>
<h1 id="一、前后端合并"><a href="#一、前后端合并" class="headerlink" title="一、前后端合并"></a>一、前后端合并</h1><p>1、打包 前端静态资源</p>
<p>注意：</p>
<ul>
<li>Vue 中的项目文件的 url 改为 服务器的IP 地址，不是本地的IP地址。</li>
<li>确保打包前的Vue 项目没有任何错误！</li>
</ul>
<p>在项目的路径下打开cmd 输入 <code>npm run build</code></p>
<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20201024171245.png" alt="image-20201024171238333"></p>
<p>看到输出 <code>Build complete</code> 即代表打包成功！</p>
<span id="more"></span>

<p>2、观察项目路径下的文件目录是否多了一个dist 文件下</p>
<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20201024171530.png" alt="image-20201024171530665"></p>
<p>文件夹下的内容为：</p>
<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20201024171712.png" alt="image-20201024171712367"></p>
<p>3、将 static 和 index.html 文件放到SpringBoot 的resource 资源路径下的static 目录下，如果没有static 文件夹，自己新建一个static 文件下，最终复制过去之后的项目结构图如下：</p>
<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20201024172039.png" alt="image-20201024172039172"></p>
<p>4、项目打包成jar包</p>
<p>注意：</p>
<ul>
<li>数据库的 url 是否正确；一般要改为服务器的IP地址，不是本地IP地址。 </li>
</ul>
<p>步骤一、先双击 <code>clean</code> ，静等一会</p>
<p>步骤二、然后再双击<code> package</code> ，静等一会</p>
<p>步骤三、观察输出框下面出现若出现 <code>BUILD SUCCESS</code> 代表 jar 包打包成功！</p>
<p>步骤四、观察项目结构目录下的 target 是否多了一个 <code>.jar </code>包</p>
<p>如果有，打包成功！</p>
<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20201024172727.png" alt="image-20201024172726821"></p>
<h1 id="二、jar-包-上传到服务器"><a href="#二、jar-包-上传到服务器" class="headerlink" title="二、jar 包 上传到服务器"></a>二、jar 包 上传到服务器</h1><p>我是通过 xftp 上传到服务器当中</p>
<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20201024173308.png" alt="image-20201024173308001"></p>
<h1 id="三、运行-jar"><a href="#三、运行-jar" class="headerlink" title="三、运行 jar"></a>三、运行 jar</h1><p>进入到jar 包的目录下，执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar .jar包名       </span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20201024173554.png" alt="image-20201024173554755"></p>
<p>这个时候就已经大功告成了！去浏览器输入服务器IP地址及端口号访问吧！</p>
<h1 id="四、项目在服务器上自动不间断地跑"><a href="#四、项目在服务器上自动不间断地跑" class="headerlink" title="四、项目在服务器上自动不间断地跑"></a>四、项目在服务器上自动不间断地跑</h1><p>还没完呢，这种启动方式是<strong>一次启动</strong></p>
<p>当我们关掉Xshell的时候，我们的网站又访问不上了，又得重新打开Xshell，执行 java -jar ***.jar。所以我们要使用下面的方法让这个项目在服务器上自动不间断地跑.</p>
<p>1、关掉重启一下Xshell（这样的话原本的项目就停掉了）</p>
<p>创建并编写文件<code> start.sh</code>,向其中添加字段 ：<code> java -jar ***.jar</code> 。</p>
<p>按ESC + :wq + 回车键保存退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim start.sh   <span class="comment"># 编写start.sh 文件</span></span><br><span class="line"><span class="comment">#内容如下：</span></span><br><span class="line">java -jar ***.jar　  <span class="comment"># *** 为项目jar 包的名称　　　　</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20201024195113.png" alt="image-20201024195113294"></p>
<p>2、 给这个start.sh 管理员权限，然后用nohup指令不间断地运行（nohup指令：忽略所有挂断（SIGHUP）信号，不挂断地运行命令）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 start.sh  //赋予管理员权限</span><br><span class="line">nohup  ./start.sh &amp;  //不间断运行文件内的指令</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20201024194950.png" alt="image-20201024194949928"></p>
<p>3、使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 8081   <span class="comment">#8080:项目的端口号 </span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20201024195033.png" alt="image-20201024195033347"></p>
<h1 id="五、可能出现的问题"><a href="#五、可能出现的问题" class="headerlink" title="五、可能出现的问题"></a>五、可能出现的问题</h1><p>1、<code>com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure</code></p>
<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20201024174104.png" alt="image-20201024174104249"></p>
<p>可能的原因（列举自己的解决方案，可能会有其他的原因）</p>
<ul>
<li>如果是阿里云，需要保证阿里云的安全组策略是开放的</li>
<li>确保Linux的防火墙端口是开启的</li>
</ul>
<p>我的原因就是防火墙端口没有开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看firewall服务状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启、重启、关闭、firewalld.service服务</span></span><br><span class="line">service firewalld start   <span class="comment"># 开启</span></span><br><span class="line">service firewalld restart <span class="comment"># 重启</span></span><br><span class="line">service firewalld stop  <span class="comment"># 关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all    <span class="comment"># 查看全部信息</span></span><br><span class="line">firewall-cmd --list-ports  <span class="comment"># 只看端口信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=8081/tcp --permanent  <span class="comment">#开端口命令：</span></span><br><span class="line">systemctl restart firewalld.service   <span class="comment">#重启防火墙</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20201024174729.png" alt="image-20201024174729546"></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>项目部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis 基础</title>
    <url>/2021/07/16/MyBatis%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="MyBatis-所解决的-JDBC-中存在的问题"><a href="#MyBatis-所解决的-JDBC-中存在的问题" class="headerlink" title="MyBatis 所解决的 JDBC 中存在的问题"></a>MyBatis 所解决的 JDBC 中存在的问题</h3><ol>
<li> 数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能</li>
<li> Sql语句写在代码中造成代码不易维护。</li>
<li> 向 sql 语句传参数麻烦，因为 sql 语句的 where 条件不一定，可能多也可能少，占位符需要和参数一一对应。 </li>
</ol>
<h3 id="入门-增删查改"><a href="#入门-增删查改" class="headerlink" title="入门-增删查改"></a>入门-增删查改</h3><p>配置Mybatis-config.xml 并连接数据库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;mapper resource=&quot;com/huang/mybatis01/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.huang.mybatis01.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>UserMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.mybatis01.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.mybatis01.model.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Zhiyu Huang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2021-03-04 14:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能 Integer updateUserById(@param(&quot;user&quot;)User user);</span></span><br><span class="line">    <span class="function">Integer <span class="title">updateUserById</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">updateUserById2</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username,<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">deleteUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.huang.mybatis01.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.huang.mybatis01.model.User&quot;</span>&gt;</span></span><br><span class="line">        insert into usertest (username,address) values(#&#123;username&#125;,#&#123;address&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUserById&quot;</span>&gt;</span></span><br><span class="line">        update usertest set username = #&#123;username&#125; where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUserById2&quot;</span>&gt;</span></span><br><span class="line">        update usertest set username = #&#123;username&#125; where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserById&quot;</span>&gt;</span></span><br><span class="line">        delete from usertest where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.huang.mybatis01.model.User&quot;</span>&gt;</span></span><br><span class="line">        select * from usertest;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.huang.mybatis01.model.User&quot;</span>&gt;</span></span><br><span class="line">        select * from usertest where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="parameterType"><a href="#parameterType" class="headerlink" title="parameterType"></a>parameterType</h3><blockquote>
<p>输入的参数类型</p>
</blockquote>
<h4 id="1-和"><a href="#1-和" class="headerlink" title="1 $ 和 #"></a>1 <code>$</code> 和 <code>#</code></h4><p>在 JDBC 调用中，SQL 的执行，我们可以通过字符串拼接的方式来解决参数的传递问题，也可以通过占位符的方式来解决参数的传递问题。当然，这种方式也传递到 MyBatis 中，在 MyBatis 中，$ 相当于是参数拼接的方式，而 # 则相当于是占位符的方式。</p>
<p>一般来说，由于参数拼接的方式存在 SQL 注入的风险，因此我们使用较少，但是在一些特殊的场景下，又不得不使用这种方式。</p>
<h4 id="2-简单类型"><a href="#2-简单类型" class="headerlink" title="2 简单类型"></a>2 简单类型</h4><p>简单数据类型传递比较容易，像根据 id 查询一条记录就算是这一类的。</p>
<p>一旦用 @Param 指定了参数类型之后，可以省略掉参数类型，就是在 xml 文件中，不用定义 parameterType 了：</p>
<p><strong>一个参数  id ，可以不用 @param 注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"><span class="comment">// 等价于 User getUserById(Integer id);</span></span><br></pre></td></tr></table></figure>

<p>对应的xml文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.huang.mybatis01.model.User&quot;</span>&gt;</span></span><br><span class="line">    select * from usertest where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>两个参数  ，必须使用 @param 注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Integer <span class="title">updateUserById2</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username,<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"><span class="comment">//不能  Integer updateUserById2(String username,Integer id);</span></span><br><span class="line"><span class="comment">// 否则就不能通过指定的参数来获取参数</span></span><br></pre></td></tr></table></figure>

<p>对应的xml 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUserById2&quot;</span>&gt;</span></span><br><span class="line">update usertest set username = #&#123;username&#125; where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-实体类-对象参数"><a href="#3-实体类-对象参数" class="headerlink" title="3 实体类 对象参数"></a>3 实体类 对象参数</h4><p>例如添加一个用户：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Integer <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<p>对应的 mapper 文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.huang.mybatis01.model.User&quot;</span>&gt;</span></span><br><span class="line">    insert into usertest (username,address) values(#&#123;username&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们在引用的时候，直接使用属性名就能够定位到对象了。如果对象存在多个，我们也需要给对象添加 @Param 注解，如果给对象添加了 @Param 注解，那么对象属性的引用，会有一些变化。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Integer <span class="title">addUser</span><span class="params">(<span class="meta">@Param(&quot;user&quot;)</span> User user)</span></span>;</span><br></pre></td></tr></table></figure>

<p>如果对象参数添加了 @Param 注解，Mapper 中的写法就会发生变化：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.huang.mybatis01.model.User&quot;</span>&gt;</span></span><br><span class="line">    insert into usertest (username,address) values(#&#123;user.username&#125;,#&#123;user.address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意多了一个前缀，这个前缀不是变量名，而是 @Param 注解中定义名称。</p>
<p>如果对象中还存在对象，用 . 继续取访问就可以了。</p>
<h4 id="4-Map-参数"><a href="#4-Map-参数" class="headerlink" title="4 Map 参数"></a>4 Map 参数</h4><p>一般不推荐在项目中使用 Map 参数。如果想要使用 Map 传递参数，技术上来说，肯定是没有问题的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Integer <span class="title">updateUsernameById</span><span class="params">(HashMap&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>
<p>XML 文件写法如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUsernameById&quot;</span>&gt;</span></span><br><span class="line">    update user set username = #&#123;username&#125; where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>引用的变量名，就是 map 中的 key。</strong>基本上和实体类是一样的，如果给 map 取了别名，那么在引用的时候，也要将别名作为前缀加上，这一点和实体类也是一样的。</p>
<h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><p>resultType 是返回类型，在实际开发中，如果返回的数据类型比较复杂，一般我们使用 resultMap，但是，对于一些简单的返回，使用 resultType 就够用了。</p>
<p>resultType 返回的类型可以是简单类型，可以是对象，可以是集合，也可以是一个 hashmap，如果是 hashmap，map 中的 key 就是字段名，value 就是字段的值。</p>
<p>输出 pojo 对象和输出 pojo 列表在 sql 中定义的 resultType 是一样的。<br>返回单个 pojo 对象要保证 sql 查询出来的结果集为单条，内部使用 sqlSession.selectOne 方法调用，mapper 接口使用 pojo 对象作为方法返回值。返回 pojo 列表表示查询出来的结果集可能为多条，内部使用 sqlSession.selectList 方法，mapper 接口使用 List 对象作为方法返回值。</p>
<h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p><strong>解决数据库中的字段名和java代码中对象的属性名不一致的问题</strong></p>
<p>在实际开发中，resultMap 是使用较多的返回数据类型配置。因为实际项目中，一般的返回数据类型比较丰富，要么字段和属性对不上，要么是一对一、一对多的查询，等等，这些需求，单纯的使用 resultType 是无法满足的，因此我们还需要使用 resultMap，也就是自己定义映射的结果集。</p>
<p>先来看一个基本用法：</p>
<p>首先在 mapper.xml 中定义一个 resultMap：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">数据库中的字段名  id book  author   price</span></span><br><span class="line"><span class="comment">对象中的属性名    id boookName bookAuthor bookPrice</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;bookMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.huang.mybatis01.model.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;book&quot;</span> <span class="attr">property</span>=<span class="string">&quot;bookName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;author&quot;</span> <span class="attr">property</span>=<span class="string">&quot;bookAuthor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;bookPrice&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这个 resultMap 中，id 用来描述主键，column 是数据库查询出来的列名，property 则是对象中的属性名。</p>
<p>然后在查询结果中，定义返回值时使用这个 ResultMap：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllBooks&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;bookMap&quot;</span>&gt;</span></span><br><span class="line">    select * from book;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h3><p>动态 SQL 是 MyBatis 中非常强大的一个功能。例如一些常见的查询场景：</p>
<ul>
<li>查询条件不确定</li>
<li>批量插入</li>
<li>….</li>
</ul>
<p>这些类似需求，我们都可以通过 MyBatis 提供的动态 SQL 来解决。</p>
<p>MyBatis 中提供的动态 SQL 节点非常多。</p>
<h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 如果只有书名，则按书名查</span></span><br><span class="line"><span class="comment">     * 2. 如果只有作者名，则按作者查</span></span><br><span class="line"><span class="comment">     * 3. 两个都有，则按书名和作者两个条件查</span></span><br><span class="line"><span class="comment">     * 4. 都没有，则查全部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function">List&lt;Book&gt; <span class="title">getAllBookByNameOrAuthor</span><span class="params">(Book book)</span></span>;</span><br></pre></td></tr></table></figure>
<p>对应的xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;bookMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.huang.mybatis01.model.Book&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;bookName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;author&quot;</span> <span class="attr">property</span>=<span class="string">&quot;bookAuthor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;bookPrice&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllBookByNameOrAuthor&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;bookMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.huang.mybatis01.model.Book&quot;</span>&gt;</span></span><br><span class="line">        select * from book</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bookName!=null and bookName!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and  name = #&#123;bookName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bookAuthor!=null and bookAuthor!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and  author = #&#123;bookAuthor&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>set 关键字一般用在<strong>更新</strong>中。因为大部分情况下，更新的字段可能不确定，如果对象中存在该字段的值，就更新该字段，不存在，就不更新。例如如下方法：</p>
<p>现在，这个方法的需求是，根据用户 id 来跟新用户的其他属性，所以，user 对象中一定存在 id，其他属性则不确定，其他属性要是有值，就更新，没值（也就是为 null 的时候），则不处理该字段。</p>
<p>我们结合 set 节点，写出来的 sql 如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;org.javaboy.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">    update user</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null&quot;</span>&gt;</span></span><br><span class="line">            username = #&#123;username&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address!=null&quot;</span>&gt;</span></span><br><span class="line">            address=#&#123;address&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;favorites!=null&quot;</span>&gt;</span></span><br><span class="line">            favorites=#&#123;favorites&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>foreach 用来处理数组/集合参数。</p>
<p>例如，我们有一个批量查询的需求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span>Integer[] ids)</span></span>;</span><br></pre></td></tr></table></figure>

<p>对应的 XML 如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.javaboy.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 mapper 中，通过 foreach 节点来遍历数组，collection 表示数组变量，open 表示循环结束后，左边的符号，close 表示循环结束后，右边的符号，item 表示循环时候的单个变量，separator 表示循环的元素之间的分隔符。</p>
<p><strong>注意，默认情况下，无论你的数组/集合参数名字是什么，在 XML 中访问的时候，都是 array，开发者可以通过 @Param 注解给参数重新指定名字。</strong></p>
<p>例如我还有一个批量插入的需求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Integer <span class="title">batchInsertUser</span><span class="params">(<span class="meta">@Param(&quot;users&quot;)</span> List&lt;User&gt; users)</span></span>;</span><br></pre></td></tr></table></figure>

<p>然后，定义该方法对应的 mapper：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;batchInsertUser&quot;</span>&gt;</span></span><br><span class="line">    insert into user (username,address) values </span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;users&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;user.username&#125;,#&#123;user.address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，在 Main 方法中进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SqlSessionFactory instance = SqlSessionFactoryUtils.getInstance();</span><br><span class="line">        SqlSession sqlSession = instance.openSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User u1 = <span class="keyword">new</span> User();</span><br><span class="line">        u1.setUsername(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        u1.setAddress(<span class="string">&quot;shenzhen&quot;</span>);</span><br><span class="line">        users.add(u1);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User();</span><br><span class="line">        u2.setUsername(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        u2.setAddress(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">        users.add(u2);</span><br><span class="line">        mapper.batchInsertUser(users);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="sql-片段"><a href="#sql-片段" class="headerlink" title="sql 片段"></a>sql 片段</h4><blockquote>
<p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p>
</blockquote>
<p>大家知道，在 SQL 查询中，一般不建议写 <code>*</code>，因为 select <code>*</code> 会降低查询效率。但是，每次查询都要把字段名列出来，太麻烦。这种使用，我们可以利用 SQL 片段来解决这个问题。</p>
<p>例如，我们先在 mapper 中定义一个 SQL 片段：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column&quot;</span>&gt;</span></span><br><span class="line">    id,usename,address</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，在其他 SQL 中，就可以引用这个变量</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.javaboy.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column&quot;</span> /&gt;</span> from user where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>又如</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在需要使用的地方使用Include标签引用即可</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">&quot;queryBlogIF&quot;</span> parameterType=<span class="string">&quot;map&quot;</span> resultType=<span class="string">&quot;blog&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> blog</span><br><span class="line">    &lt;<span class="keyword">where</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">include</span> refid=<span class="string">&quot;if-title-author&quot;</span>&gt;&lt;/<span class="keyword">include</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">where</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><blockquote>
<p>定义变量，方便引用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按姓氏查书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> author</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function">List&lt;Book&gt; <span class="title">getBookByAuthor</span><span class="params">(<span class="meta">@Param(&quot;author&quot;)</span> String author)</span></span>;</span><br></pre></td></tr></table></figure>

<p>对应的xml文件如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBookByAuthor&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;bookMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;authorLike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;author+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">    SELECT * FROM book WHERE author LIKE #&#123;authorLike&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--或者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBookByAuthor&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;bookMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM book WHERE author LIKE contact(&#x27;%&#x27;,#&#123;author&#125;,&#x27;%&#x27;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBookByAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Book&gt; list = bookMapper.getBookByAuthor(<span class="string">&quot;鲁&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Book book : list) &#123;</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h4><blockquote>
<p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span> <span class="comment">&lt;!--只会执行一个--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">   AND title like #&#123;title&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">   AND author_name like #&#123;author.name&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">   AND featured = 1</span><br><span class="line"> <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="主键回填"><a href="#主键回填" class="headerlink" title="主键回填"></a>主键回填</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>使用 <code>useGeneratedKeys=&quot;true&quot;</code> 自动增长的key,并复制给 <code>keyProperty=&quot;id&quot;</code></p>
<p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Integer <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<p>对应的xml文件写法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.huang.mybatis01.model.User&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	insert into usertest (username,address) values(#&#123;username&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">&quot;testname2&quot;</span>);</span><br><span class="line">    user.setAddress(<span class="string">&quot;testaddress2&quot;</span>);</span><br><span class="line">    Integer integer = userMapper.addUser(user);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 主键回填之后，user 对象的id 就会有值，否则没值</span></span><br><span class="line">    System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.huang.mybatis01.model.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">        select last_insert_id();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into usertest (username,address) values(#&#123;username&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">表示执行完  insert into usertest (username,address) values(#&#123;username&#125;,#&#123;address&#125;); 之后就执行 select last_insert_id(); 并把查询之后的值复制给 id </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h3><h4 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h4><p>环境信息：例如：每本书都有一个作者，作者都有自己的属性，根据这个，我来定义两个实体类：两个表，分别是author,article</p>
<p>两个实体类 如下：</p>
<p>Article</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Author</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>需求：</strong></p>
<p><strong>查询所有的文章以及对应的作者信息</strong></p>
<p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">getAllArticle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的XMl文件内容如下(情况一)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.huang.mybatis01.mapper.ArticleMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseArticleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.huang.mybatis01.model.Article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">column</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--不统一前缀  columnPrefix=&quot;author_&quot;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getAllArticle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.huang.mybatis01.model.Article&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;BaseArticleMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;author&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.huang.mybatis01.model.Author&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;author_id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;author_name&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;author_age&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--统一前缀  columnPrefix=&quot;author_&quot;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getAllArticle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.huang.mybatis01.model.Article&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;BaseArticleMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;author&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;author_&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.huang.mybatis01.model.Author&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllArticle&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getAllArticle&quot;</span>&gt;</span></span><br><span class="line">        SELECT a.*,au.`id` AS author_id,au.`name` AS author_name,au.age AS author_age</span><br><span class="line">        FROM article AS a,author AS au</span><br><span class="line">        WHERE a.`author_id`=au.`id`;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应的XMl文件内容如下(情况二)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.huang.mybatis01.mapper.AuthorMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseArticleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.huang.mybatis01.model.Author&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.huang.mybatis01.mapper.ArticleMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseArticleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.huang.mybatis01.model.Article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">column</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引用其他Mapper文件中的基本Map resultMap=&quot;com.huang.mybatis01.mapper.AuthorMapper.BaseArticleMap--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getAllArticle2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.huang.mybatis01.model.Article&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;BaseArticleMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;author&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.huang.mybatis01.model.Author&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;author_&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;com.huang.mybatis01.mapper.AuthorMapper.BaseArticleMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllArticle&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getAllArticle2&quot;</span>&gt;</span></span><br><span class="line">        SELECT a.*,au.`id` AS author_id,au.`name` AS author_name,au.age AS author_age</span><br><span class="line">        FROM article AS a,author AS au</span><br><span class="line">        WHERE a.`author_id`=au.`id`;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>association 节点用来描述一对一的关系。这个节点中的内容，和 resultMap 一样，也是 id，result 等，在这个节点中，我们还可以继续描述一对一。</p>
<h4 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h4><p>一对多查询，也是一个非常典型的使用场景。比如用户和角色的关系，一个用户可以具备多个角色。</p>
<p>首先我们准备三个表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Navicat MySQL Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Source Server         : localhost</span></span><br><span class="line"><span class="comment">Source Server Version : 50717</span></span><br><span class="line"><span class="comment">Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment">Source Database       : security</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Target Server Type    : MYSQL</span></span><br><span class="line"><span class="comment">Target Server Version : 50717</span></span><br><span class="line"><span class="comment">File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Date: 2018-07-28 15:26:51</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nameZh` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;dba&#x27;</span>, <span class="string">&#x27;数据库管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;系统管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;用户&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `enabled` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `locked` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;2a10RMuFXGQ5AtH4wOvkUqyvuecpqUSeoxZYqilXzbz50dceRsga.WYiq&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;2a10RMuFXGQ5AtH4wOvkUqyvuecpqUSeoxZYqilXzbz50dceRsga.WYiq&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;sang&#x27;</span>, <span class="string">&#x27;2a10$RMuFXGQ5AtH4wOvkUqyvuecpqUSeoxZYqilXzbz50dceRsga.WYiq&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `user_role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `uid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);java</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role` <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>这三个表中，有用户表，角色表以及用户角色关联表，其中用户角色关联表用来描述用户和角色之间的关系，他们是一对多的关系。</p>
<p>然后，根据这三个表，创建两个实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String nameZh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，定义一个根据 id 查询用户的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserWithRole&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.javaboy.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserWithRoles&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.javaboy.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;org.javaboy.mybatis.model.Role&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;nameZh&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rnameZH&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;resultMap id=&quot;UserWithRoles&quot; type=&quot;org.javaboy.mybatis.model.User&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;collection property=&quot;roles&quot; ofType=&quot;org.javaboy.mybatis.model.Role&quot; columnPrefix=&quot;r&quot; resultMap=&quot;org.javaboy.mybatis.mapper.RoleMapper.BaseRoleMap&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;/collection&gt;</span></span><br><span class="line"><span class="comment">&lt;/resultMap&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;UserWithRoles&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserWithRole&quot;</span>&gt;</span></span><br><span class="line">    SELECT u.*,r.`id` AS rid,r.`name` AS rname,r.`nameZh` AS rnameZh FROM USER u,role r,user_role ur WHERE u.`id`=ur.`uid` AND ur.`rid`=r.`id` AND u.`id`=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>鉴别映射器</strong>  </p>
<p>关键字 ： <code>discriminator</code> </p>
<p>根据 enable=1 的话就显示Role信息,使用<code>UserWithRolesMap</code>，=0就不显示Role信息，使用<code>BaseUserMap</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getAllUsersWithRoles2</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>java对应的xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.huang.mybatis01.model.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;enabled&quot;</span> <span class="attr">column</span>=<span class="string">&quot;enabled&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserWithRolesMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.huang.mybatis01.model.User&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;BaseUserMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.huang.mybatis01.model.Role&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;role_&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">resultMap</span>=<span class="string">&quot;com.huang.mybatis01.mapper.RoleMapper.BaseRoleMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getAllUsersWithRoles2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.huang.mybatis01.model.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">column</span>=<span class="string">&quot;enabled&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserWithRolesMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseUserMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    鉴别映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUsersWithRoles2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getAllUsersWithRoles2&quot;</span>&gt;</span></span><br><span class="line">        SELECT u.*,r.`id` AS role_id,r.`name` AS role_name FROM usertest u</span><br><span class="line">LEFT JOIN user_role ur ON ur.`uid`=u.`id`</span><br><span class="line">LEFT JOIN roletest r ON r.id = ur.`rid`;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="TypeHandlers"><a href="#TypeHandlers" class="headerlink" title="TypeHandlers"></a>TypeHandlers</h3><p>在 MyBatis 映射中，能够自动将 Jdbc 类型映射为 Java 类型。默认的映射规则，如下：</p>
<table>
<thead>
<tr>
<th align="center">类型处理器</th>
<th align="center">Java类型</th>
<th align="center">JDBC类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BooleanTypeHandler</td>
<td align="center">Boolean，boolean</td>
<td align="center">任何兼容的布尔值</td>
</tr>
<tr>
<td align="center">ByteTypeHandler</td>
<td align="center">Byte，byte</td>
<td align="center">任何兼容的数字或字节类型</td>
</tr>
<tr>
<td align="center">ShortTypeHandler</td>
<td align="center">Short，short</td>
<td align="center">任何兼容的数字或短整型</td>
</tr>
<tr>
<td align="center">IntegerTypeHandler</td>
<td align="center">Integer，int</td>
<td align="center">任何兼容的数字和整型</td>
</tr>
<tr>
<td align="center">LongTypeHandler</td>
<td align="center">Long，long</td>
<td align="center">任何兼容的数字或长整型</td>
</tr>
<tr>
<td align="center">FloatTypeHandler</td>
<td align="center">Float，float</td>
<td align="center">任何兼容的数字或单精度浮点型</td>
</tr>
<tr>
<td align="center">DoubleTypeHandler</td>
<td align="center">Double，double</td>
<td align="center">任何兼容的数字或双精度浮点型</td>
</tr>
<tr>
<td align="center">BigDecimalTypeHandler</td>
<td align="center">BigDecimal</td>
<td align="center">任何兼容的数字或十进制小数类型</td>
</tr>
<tr>
<td align="center">StringTypeHandler</td>
<td align="center">String</td>
<td align="center">CHAR和VARCHAR类型</td>
</tr>
<tr>
<td align="center">ClobTypeHandler</td>
<td align="center">String</td>
<td align="center">CLOB和LONGVARCHAR类型</td>
</tr>
<tr>
<td align="center">NStringTypeHandler</td>
<td align="center">String</td>
<td align="center">NVARCHAR和NCHAR类型</td>
</tr>
<tr>
<td align="center">NClobTypeHandler</td>
<td align="center">String</td>
<td align="center">NCLOB类型</td>
</tr>
<tr>
<td align="center">ByteArrayTypeHandler</td>
<td align="center">byte[]</td>
<td align="center">任何兼容的字节流类型</td>
</tr>
<tr>
<td align="center">BlobTypeHandler</td>
<td align="center">byte[]</td>
<td align="center">BLOB和LONGVARBINARY类型</td>
</tr>
<tr>
<td align="center">DateTypeHandler</td>
<td align="center">Date（java.util）</td>
<td align="center">TIMESTAMP类型</td>
</tr>
<tr>
<td align="center">DateOnlyTypeHandler</td>
<td align="center">Date（java.util）</td>
<td align="center">DATE类型</td>
</tr>
<tr>
<td align="center">TimeOnlyTypeHandler</td>
<td align="center">Date（java.util）</td>
<td align="center">TIME类型</td>
</tr>
<tr>
<td align="center">SqlTimestampTypeHandler</td>
<td align="center">Timestamp（java.sql）</td>
<td align="center">TIMESTAMP类型</td>
</tr>
<tr>
<td align="center">SqlDateTypeHandler</td>
<td align="center">Date（java.sql）</td>
<td align="center">DATE类型</td>
</tr>
<tr>
<td align="center">SqlTimeTypeHandler</td>
<td align="center">Time（java.sql）</td>
<td align="center">TIME类型</td>
</tr>
<tr>
<td align="center">ObjectTypeHandler</td>
<td align="center">任意</td>
<td align="center">其他或未指定类型</td>
</tr>
<tr>
<td align="center">EnumTypeHandler</td>
<td align="center">Enumeration类型</td>
<td align="center">VARCHAR-任何兼容的字符串类型，作为代码存储（而不是索引）。</td>
</tr>
</tbody></table>
<p>前面案例中，之所以数据能够接收成功，是因为有上面这些默认的类型处理器，处理基本数据类型，这些够用了，特殊类型，需要我们自定义类型处理器。</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>【HashMap】1.认识散列表</title>
    <url>/2021/07/18/%E3%80%90HashMap%E3%80%911.%E8%AE%A4%E8%AF%86%E6%95%A3%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="1-散列表是什么-What"><a href="#1-散列表是什么-What" class="headerlink" title="1 散列表是什么? What"></a>1 散列表是什么? What</h1><p>哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p>
<p>记录的存储位置 = f (关键字)</p>
<p>这里的对应关系 f 称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。</p>
<span id="more"></span>

<h1 id="2-散列表有什么用？-Why"><a href="#2-散列表有什么用？-Why" class="headerlink" title="2 散列表有什么用？ Why?"></a>2 散列表有什么用？ Why?</h1><h2 id="回顾数组"><a href="#回顾数组" class="headerlink" title="回顾数组"></a>回顾数组</h2><p>数组优势</p>
<ul>
<li>按照索引查询元素速度快</li>
<li>能存储大量数据</li>
<li>按照索引遍历数组方便</li>
</ul>
<p>数组劣势</p>
<ul>
<li>元素个数固定</li>
<li>增加、删除元素效率慢</li>
<li>数组只能存储一种类型的数据</li>
<li>未封装任何方法，所有操作都需要用户自己定义</li>
</ul>
<h2 id="回顾链表"><a href="#回顾链表" class="headerlink" title="回顾链表"></a>回顾链表</h2><p>优势 </p>
<ul>
<li><p>插入删除速度快</p>
</li>
<li><p>内存利用率高，不会浪费内存</p>
</li>
<li><p>大小没有固定，拓展很灵活。</p>
</li>
</ul>
<p>劣势</p>
<ul>
<li>不能随机查找，必须从第一个开始遍历，查找效率低</li>
</ul>
<blockquote>
<p><strong>那么我们能不能综合两者的特性，做出一种寻址容易，插入删除也容易的数据结构？答案是肯定的，这就是我们要提起的哈希表，哈希表有多种不同的实现方法，我接下来解释的是最常用的一种方法——拉链法，我们可以理解为“链表的数组”，如图：</strong></p>
</blockquote>
<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20210314132038.png" alt="image-20210314132030598"></p>
<p>左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p>
<h2 id="散列表特点"><a href="#散列表特点" class="headerlink" title="散列表特点"></a>散列表特点</h2><ul>
<li>Hash Table的查询速度非常的快，几乎是O(1)的时间复杂度。</li>
<li>hash就是找到一种数据内容和数据存放地址之间的映射关系。</li>
</ul>
<h1 id="3-怎么建立散列表？How"><a href="#3-怎么建立散列表？How" class="headerlink" title="3 怎么建立散列表？How"></a>3 怎么建立散列表？How</h1><h2 id="3-1-如何建立一个数据内容和数据存放地址之间的映射关系？"><a href="#3-1-如何建立一个数据内容和数据存放地址之间的映射关系？" class="headerlink" title="3.1 如何建立一个数据内容和数据存放地址之间的映射关系？"></a>3.1 如何建立一个数据内容和数据存放地址之间的映射关系？</h2><p>设计散列函数</p>
<ul>
<li>直接定址法</li>
<li>除留余数法</li>
<li>平方取中法</li>
<li>折叠法</li>
<li>数字分析法</li>
<li>哈希函数（Java）</li>
</ul>
<h2 id="3-2-如何解决地址冲突问题（哈希冲突）？"><a href="#3-2-如何解决地址冲突问题（哈希冲突）？" class="headerlink" title="3.2 如何解决地址冲突问题（哈希冲突）？"></a>3.2 如何解决地址冲突问题（哈希冲突）？</h2><h3 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h3><p>由于hash的原理是将输入空间的值映射成hash空间内，而hash值的空间远小于输入的空间。</p>
<p>根据抽屉原理，一定会存在不同的输入被映射成相同输出的情况。</p>
<p>抽屉原理：桌上有十个苹果，要把这十个苹果放到九个抽屉里，无论怎样放，我们会发现至少会有一个抽屉里面放不少于两个苹果。这一现象就是我们所说的“抽屉原理”。</p>
<h2 id="处理冲突的方法如下"><a href="#处理冲突的方法如下" class="headerlink" title="处理冲突的方法如下"></a>处理冲突的方法如下</h2><h3 id="1-开放定址法"><a href="#1-开放定址法" class="headerlink" title="1 开放定址法"></a>1 开放定址法</h3><p>开放定址法，就是由关键码得到的散列地址一旦产生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。</p>
<p>找下一个空散列地址的方法很多，下面介绍三种：</p>
<ul>
<li>线性探测法</li>
<li>二次探测法</li>
<li>随机探测法</li>
</ul>
<h3 id="2-拉链法"><a href="#2-拉链法" class="headerlink" title="2 拉链法"></a>2 拉链法</h3><p>基本思想：</p>
<p>将所有散列地址相同的记录，即所有关键码为同义词的记录都存储在一个单链表中。</p>
<h1 id="4-Java中的HashMap"><a href="#4-Java中的HashMap" class="headerlink" title="4.Java中的HashMap"></a>4.Java中的HashMap</h1><p>Hash也称散列、哈希，对应的英文都是Hash。基本原理就是把任意长度的输入，通过Hash算法变成固定长度的输出。</p>
<p>这个映射的规则就是对应的Hash算法，而原始数据映射后的二进制串就是哈希值。</p>
<p><strong>Hash的特点：</strong></p>
<p>1.从hash值不可以反向推导出原始的数据</p>
<p>2.输入数据的微小变化会得到完全不同的hash值，相同的数据会得到相同的值</p>
<p>3.哈希算法的执行效率要高效，长的文本也能快速地计算出哈希值</p>
<p>4.hash算法的冲突概率要小</p>
]]></content>
      <categories>
        <category>HashMap</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>【HashMap】2.基本原理分析</title>
    <url>/2021/07/18/%E3%80%90HashMap%E3%80%912.%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="1-HashMap的继承体系是什么样的？"><a href="#1-HashMap的继承体系是什么样的？" class="headerlink" title="1. HashMap的继承体系是什么样的？"></a>1. HashMap的继承体系是什么样的？</h2><p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20210314134746.png" alt="01_HashMap"></p>
<h2 id="2-Node数据结构分析？"><a href="#2-Node数据结构分析？" class="headerlink" title="2. Node数据结构分析？"></a>2. Node数据结构分析？</h2><p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20210314134849.png" alt="03_Node类图"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;   <span class="comment">// 对key的hashcode值进行hash运算后得到的值，存储在Entry，避免重复计算</span></span><br><span class="line">    <span class="keyword">final</span> K key;      <span class="comment">// key 值    </span></span><br><span class="line">    V value;           <span class="comment">// value 值</span></span><br><span class="line">    Node&lt;K,V&gt; next;    <span class="comment">// 指向链表的下一个结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="3-底层存储结构介绍？"><a href="#3-底层存储结构介绍？" class="headerlink" title="3. 底层存储结构介绍？"></a>3. 底层存储结构介绍？</h2><p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20210314134807.png" alt="02_HashMap底层存储结构 "></p>
<p>总的存储结构：数组+链表（1.8后尾插）+红黑树</p>
<h2 id="4-put数据原理分析？"><a href="#4-put数据原理分析？" class="headerlink" title="4. put数据原理分析？"></a>4. put数据原理分析？</h2><p><strong>下来详细展示了 node 在 HashMap 中的数组下标位置</strong></p>
<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20210314134926.png" alt="04_map-put过程形象图"></p>
<p><strong>下面流程图详细暂时了 在HashMap 中的put 过程</strong></p>
<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20210314141923.png" alt="202005012213360"></p>
<h2 id="5-什么是Hash碰撞？"><a href="#5-什么是Hash碰撞？" class="headerlink" title="5. 什么是Hash碰撞？"></a>5. 什么是Hash碰撞？</h2><p>HashMap是使用哈希表来存储的。当我们要新增或查找某个元素，就把当前元素的关键字通过哈希函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作。</p>
<p><strong>而哈希冲突就是两个不同的元素，通过哈希函数计算后得出的实际存储地址相同。</strong></p>
<p>或者说，当我们对某个元素进行哈希运算后得到一个存储地址，然而要进行插入的时候，发现已经被其他元素占用了，其实这就是所谓的哈希冲突。</p>
<p><strong>为解决冲突问题，可以采用开放地址法和链地址法等，在Java中HashMap采用了链地址法。</strong></p>
<p><strong>链地址法</strong>，简单来说，就是数组加链表的结合。在每个数组中都一个链表结构，当数据被哈希函数计算后，就得到数组下标，把数据放在对应下标元素的数组中，如果数组中已经有元素，就转变为链表存在已存在的数据后面。</p>
<p><strong>哈希函数</strong>十分重要，好的哈希函数要把不同的键计算出来的结果十分分散的分布，分散的越均匀，发生Hash碰撞的概率就越小，map的存取效率就会越高，存储空间的利用率越好。</p>
<h2 id="6-什么是链化、树化？"><a href="#6-什么是链化、树化？" class="headerlink" title="6. 什么是链化、树化？"></a>6. 什么是链化、树化？</h2><p><strong>什么时候发生链化？</strong></p>
<p>当产生哈希冲突的时候就开始链化。通俗点说就是，数据被哈希函数计算后，如果数组中已经有元素，就转变为链表存在已存在的数据后面。</p>
<p><strong>什么时候发生树化（红黑树）？</strong></p>
<p>在链表长度大于 8 并且 表的长度大于 64 的时候会转化红黑树</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">        treeifyBin(tab, hash);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-jdk8-为什么引入红黑树？"><a href="#7-jdk8-为什么引入红黑树？" class="headerlink" title="7. jdk8 为什么引入红黑树？"></a>7. jdk8 为什么引入红黑树？</h2><p>在平常我们用HashMap的时候，HashMap里面存储的key是具有良好的hash算法的key（比如String、Integer等包装类），冲突几率自然微乎其微，此时链表几乎不会转化为红黑树</p>
<p>但是当key为我们自定义的对象时，我们可能采用了不好的hash算法，使HashMap中key的冲突率极高，但是这时HashMap为了保证高速的查找效率，就引入了红黑树来优化查询了。</p>
<p><strong>红黑树的引入保证了在大量hash冲突的情况下，HashMap还具有良好的查询性能。</strong></p>
<blockquote>
<p><strong>举个例子，若hash算法写的不好，一个桶中冲突1024个key，使用链表平均需要查询512次，但是红黑树仅仅10次。</strong></p>
</blockquote>
<p>红黑树虽然本质上是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为O(log n)。加快检索速率。</p>
<p><strong>问题：为什么树化的临界值为8？</strong></p>
<p>通过源码我们得知HashMap源码作者通过泊松分布算出，当桶中结点个数为8时，出现的几率是亿分之6的，因此常见的情况是桶中个数小于8的情况，此时链表的查询性能和红黑树相差不多，因为转化为树还需要时间和空间，所以此时没有转化成树的必要。</p>
<p><strong>问题：为什么不使用AVL树而使用红黑树？</strong></p>
<p>红黑树和AVL树都是最常用的平衡二叉搜索树，它们的查找、删除、修改都是O(lgn) time</p>
<p>AVL树和红黑树有几点比较和区别：</p>
<p>（1）AVL树是更加严格的平衡，因此可以提供更快的查找速度，一般读取查找密集型任务，适用AVL树。<br>（2）红黑树更适合于插入修改密集型任务。<br>（3）通常，AVL树的旋转比红黑树的旋转更加难以平衡和调试。</p>
<p>红黑树相比avl树，在检索的时候效率其实差不多，都是通过平衡来二分查找。但对于插入删除等操作效率提高很多。红黑树不像avl树一样追求绝对的平衡，他允许局部很少的不完全平衡，这样对于效率影响不大，但省去了很多没有必要的调平衡操作，avl树调平衡有时候代价较大，所以效率不如红黑树。</p>
<h2 id="8-HashMap-扩容原理？"><a href="#8-HashMap-扩容原理？" class="headerlink" title="8. HashMap 扩容原理？"></a>8. HashMap 扩容原理？</h2><blockquote>
<p>DK1.7与JDK1.8的扩容机制有所不同。</p>
</blockquote>
<h3 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><p>扩容必须满足两个条件：</p>
<p>1、 存放新值的时候当前已有元素的个数必须大于等于阈值<br>2、 存放新值的时候当前存放数据发生hash碰撞（当前key计算的hash值换算出来的数组下标位置已经存在值）</p>
<p>在JDK1.7中，先判断是否需要扩容，然后再存放新元素。</p>
<p>从JDK1.7的put方法中，当将要存储的数据经过计算存入的位置目前为空，就使用addEntry将数据存入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加新的元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123; <span class="comment">//threshold为当前容量乘负载因子</span></span><br><span class="line">            resize(<span class="number">2</span> * table.length);<span class="comment">//当size超过临界阈值threshold，并且即将发生哈希冲突时进行扩容</span></span><br><span class="line">            hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">            bucketIndex = indexFor(hash, table.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        createEntry(hash, key, value, bucketIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.7中扩容条件有两个：</p>
<p>要判断是否到达阈值(负载因子<em>当前容量)<br>当前桶的位置不为空(产生了一次哈希冲突)。</em>*<br>只有size超过临界阈值threshold，并且即将发生哈希冲突时进行扩容，扩容后再添加元素。扩容时调用resize()方法进行，数组长度变为两倍：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//扩容方法</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;   <span class="comment">//传入新的容量</span></span><br><span class="line">     Entry[] oldTable = table;    <span class="comment">//引用扩容前的Entry数组</span></span><br><span class="line">      <span class="keyword">int</span> oldCapacity = oldTable.length;         </span><br><span class="line">      <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;  <span class="comment">//扩容前的数组大小如果已经达到最大(2^30)了</span></span><br><span class="line">          threshold = Integer.MAX_VALUE; <span class="comment">//修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了</span></span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">     Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];  <span class="comment">//初始化一个新的Entry数组</span></span><br><span class="line">     transfer(newTable);                         <span class="comment">//！！将数据转移到新的Entry数组里，数据迁移！！</span></span><br><span class="line">     table = newTable;                           <span class="comment">//HashMap的table属性引用新的Entry数组</span></span><br><span class="line">     threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);<span class="comment">//修改阈值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>resize()方法还调用了transfer()方法进行数据迁移，用来把原来的数据复制到新扩展的HashMap中，而这个函数也导致了HashMap的线程不安全：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据迁移的方法，头插法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">　　　　　<span class="comment">//for循环中的代码，逐个遍历链表，重新计算索引位置，将老数组数据复制到新数组中去（数组不存储实际数据，所以仅仅是拷贝引用而已）</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">                    e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">                <span class="comment">//将当前entry的next链指向新的索引位置,newTable[i]有可能为空，有可能也是个entry链，如果是entry链，直接在链表头部插入。</span></span><br><span class="line">                <span class="comment">//以下三行代码多线程造成环</span></span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                e = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>transfer()方法将老数组中的数据逐个链表地遍历，扔到新的扩容后的数组中，我们的数组索引位置的计算是通过 对key值的hashcode进行hash扰乱运算后，再通过和 length-1进行位运算得到最终数组索引位置。</p>
<h3 id="DK1-8"><a href="#DK1-8" class="headerlink" title="DK1.8"></a>DK1.8</h3><p>Java8不再像Java7中那样需要满足两个条件，Java8中扩容只需要满足一个条件：当前存放新值（注意不是替换已有元素位置时）的时候已有元素的个数大于等于阈值（已有元素等于阈值，下一个存放后必然触发扩容机制）</p>
<p>注：在JDK1.8 中的put方法中，是先添加元素，添加元素之后再判断数组的容量超过阈值就直接扩容，和jdk1.7的顺序不同。(JDK1.8添加完完素之后判断是否进行扩容)</p>
<p>DK8的rehash过程很有趣，相比JDK7做了不少优化，我们来看下这里的rehash过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 数组扩容为之前2倍大小的代码省略，这里主要分析rehash过程。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line"> <span class="comment">// 遍历旧数组</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">   Node&lt;K,V&gt; e;</span><br><span class="line">   <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">     oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 1. 如果旧数组中不存在碰撞,则直接移动到新数组的位置</span></span><br><span class="line">     <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">        <span class="comment">// 2. 如果存在碰撞，且节点类型是树节点，则进行树节点拆分(挂载到扩容后的数组中或者转为链表)</span></span><br><span class="line">        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">     <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 处理冲突是链表的情况,会保留原有节点的顺序</span></span><br><span class="line">       Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">       Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">       Node&lt;K,V&gt; next;</span><br><span class="line">       <span class="keyword">do</span> &#123;</span><br><span class="line">         next = e.next;</span><br><span class="line">         <span class="comment">// 4. 判断扩容后元素是否在原有的位置(这里非常巧妙,下面会分析)</span></span><br><span class="line">         <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">               loHead = e;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               loTail.next = e;</span><br><span class="line">           loTail = e;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 5. 元素不是在原有位置</span></span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">               hiHead = e;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               hiTail.next = e;</span><br><span class="line">           hiTail = e;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 6. 将扩容后未改变index的元素复制到新数组</span></span><br><span class="line">       <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">         loTail.next = <span class="keyword">null</span>;</span><br><span class="line">         newTab[j] = loHead;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 7. 将扩容后改变了index位置的元素复制到新数组</span></span><br><span class="line">       <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">         hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">         <span class="comment">// 8. index改变后,新的下标是j+oldCap,这里也很巧妙，下面会分析</span></span><br><span class="line">         <span class="comment">//扩容后的新位置只有两个，要么新位置的下标和原来位置一样，要么就是在原来下标的基础上加上扩容大小。</span></span><br><span class="line">         newTab[j + oldCap] = hiHead;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码中展现了整个rehash（扩容后，将原来数据迁移旧数据中药重新计算下标）的过程，先遍历旧数组中的元素，接着做下面的事情</p>
<p>如果旧数组中不存在数据碰撞(未挂载链表或者红黑树),那么直接将元素赋值到新数组中，其中index=e.hash &amp; (newCap - 1)。<br>如果存在碰撞，且节点类型是树节点，则进行树节点拆分(挂载到扩容后的数组中或者转为链表)<br>如果存在碰撞，且节点是链表，则处理链表的情况,rehash过程会保留节点原始顺序(JDK7中不会保留，这也是导致jdk7中多线程出现死循环的原因)<br>判断元素在扩容后是否还处于原有的位置，这里通过(e.hash &amp; oldCap) == 0判断,oldCap表示扩容前数组的大小。<br>发现元素不是在原有位置，更新hiTail和hiHead的指向关系<br>将扩容后未改变index的元素复制到新数组<br>将扩容后改变了index位置的元素复制到新数组，新数组的下标是 j + oldCap。</p>
<p>其中第4点和第5点中将链表的元素分为两部分(do…while部分)，一部分是rehash后index未改变的元素，一部分是index被改变的元素。分别用两个指针来指向头尾节点。</p>
<p>比如当oldCap=8时,1–&gt;9–&gt;17都挂载在tab[1]上,而扩容后，1–&gt;17挂载在tab[1]上,9挂载在tab[9]上。<br>那么是如何确定rehash后index是否被改变呢？改变之后的index又变成了多少呢？</p>
<p>这里的设计很是巧妙，还记得HashMap中数组大小是2的n次幂吗?当我们计算索引位置的时候，使用的是 e.hash &amp; (table.length -1)。</p>
<p>这里我们讨论数组大小从8扩容到16的过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tab.length -<span class="number">1</span> = <span class="number">7</span>   <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">e.hashCode = x      <span class="number">0</span> x x x x</span><br><span class="line">==============================</span><br><span class="line">                    <span class="number">0</span> <span class="number">0</span> y y y  </span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ZhiyuHuang/image2/raw/master/img/20210314134943.jpg" alt="扩容-链表处理"></p>
<p>扩容后，index的位置由低四位来决定,而低三位和扩容前一致。也就是说扩容后index的位置是否改变是由高字节来决定的,也就是说我们只需要将hashCode和高位进行运算即可得到index是否改变。</p>
]]></content>
      <categories>
        <category>HashMap</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
</search>
